{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20; //Do not change the solidity version as it negatively impacts submission grading\n\ncontract ExampleExternalContract {\n    bool public completed;\n\n    function complete() public payable {\n        completed = true;\n    }\n}\n"
    },
    "contracts/Staker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ExampleExternalContract.sol\";\n\ncontract Staker {\n    ExampleExternalContract public exampleExternalContract;\n\n    mapping(address => uint256) public balances;\n    uint256 public constant threshold = 1 ether;\n    uint256 public deadline;\n    bool public openForWithdraw;\n\n    event Stake(address indexed staker, uint256 amount);\n\n    constructor(address externalContractAddress) {\n        exampleExternalContract = ExampleExternalContract(externalContractAddress);\n        deadline = block.timestamp + 30 seconds; // buat testing cepat\n        openForWithdraw = false;\n    }\n\n    modifier beforeDeadline() {\n        require(block.timestamp < deadline, \"Deadline passed\");\n        _;\n    }\n\n    modifier afterDeadline() {\n        require(block.timestamp >= deadline, \"Still before deadline\");\n        _;\n    }\n\n    modifier notCompleted() {\n        require(!exampleExternalContract.completed(), \"Already completed\");\n        _;\n    }\n\n    function stake() public payable beforeDeadline notCompleted {\n        require(msg.value > 0, \"Must send ETH\");\n        balances[msg.sender] += msg.value;\n        emit Stake(msg.sender, msg.value);\n    }\n\n    function execute() public afterDeadline notCompleted {\n        uint256 contractBalance = address(this).balance;\n        if (contractBalance >= threshold) {\n            exampleExternalContract.complete{value: contractBalance}();\n        } else {\n            openForWithdraw = true;\n        }\n    }\n\n    function withdraw() public afterDeadline notCompleted {\n        require(openForWithdraw, \"Withdrawals not open\");\n        uint256 userBal = balances[msg.sender];\n        require(userBal > 0, \"No balance\");\n        balances[msg.sender] = 0;\n        (bool sent, ) = payable(msg.sender).call{value: userBal}(\"\");\n        require(sent, \"Withdraw failed\");\n    }\n\n    function timeLeft() public view returns (uint256) {\n        if (block.timestamp >= deadline) return 0;\n        return deadline - block.timestamp;\n    }\n\n    receive() external payable {\n        stake();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}